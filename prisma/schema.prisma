// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  internships   Internship[]
  resumes       Resume[]
  notes         Note[]
  generatedUIs  GeneratedUI[]

  @@map("users")
}

model Internship {
  id          String   @id @default(cuid())
  userId      String
  company     String
  role        String
  status      String @default("APPLIED")
  dateApplied DateTime @default(now())
  tags        String
  link        String?
  description String?
  location    String?
  salary      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes Note[]

  @@map("internships")
}

model Resume {
  id         String   @id @default(cuid())
  userId     String
  filename   String
  url        String
  fileSize   Int?
  uploadedAt DateTime @default(now())
  isDefault  Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("resumes")
}

model Note {
  id           String     @id @default(cuid())
  userId       String
  internshipId String?
  title        String
  content      String
  dueDate      DateTime?
  isCompleted  Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  internship Internship? @relation(fields: [internshipId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model GeneratedUI {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String?
  componentCode String
  prompt        String
  isSaved       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_uis")
}

// Removed enum for SQLite compatibility
// Valid status values: APPLIED, INTERVIEWING, OFFER, REJECTED, WITHDRAWN
